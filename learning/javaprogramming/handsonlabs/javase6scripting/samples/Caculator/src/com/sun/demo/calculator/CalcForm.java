/*
 * CalcForm.java
 *
 * Copyright 2006 Sun Microsystems, Inc. ALL RIGHTS RESERVED Use of
 * this software is authorized pursuant to the terms of the license
 * found at http://developers.sun.com/berkeley_license.html .
 *
 */

package com.sun.demo.calculator;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import javax.script.ScriptEngineManager;
import javax.script.ScriptEngine;
import javax.script.ScriptException;
import javax.swing.JOptionPane;
import java.awt.event.KeyEvent;

/**
 *
 * @author  John O'Conner
 */
public class CalcForm extends javax.swing.JFrame
    implements KeyPadListener, CalcModelEventListener {
  
  /**
   * Creates new form CalcForm
   */
  public CalcForm() {
    initComponents();
    listeners = new ArrayList<OperationListener>();
    keyPad.addKeyPadListener(this);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    txtDisplay = new javax.swing.JTextField();
    keyPad = new com.sun.demo.calculator.KeyPad();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("ScriptCalc");
    txtDisplay.setEditable(false);
    txtDisplay.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(txtDisplay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
          .addComponent(keyPad, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(txtDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(keyPad, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    pack();
  }// </editor-fold>//GEN-END:initComponents
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new CalcForm().setVisible(true);
      }
    });
  }
  
  
  
  private boolean bKeyingNumber = true;
  
  private Number getNumber() {
    Number number = null;
    String txt = txtDisplay.getText();
    if (txt != null & txt.length()>0) {
      
      try {
        number = Double.valueOf(txt);
      } catch(NumberFormatException ex) {
        number = Double.NaN;
      }
    }
    return number;
  }
  
  public void keySelected(KeyPadEvent evt) {
    Key key = evt.getSelectedKey();
    Number number = null;
    
    switch (key) {
      // digit keys pressed
      case KEY_ZERO:
        
        setDisplay(DIGIT_ZERO, bKeyingNumber);
        bKeyingNumber = true;
        break;
      case KEY_ONE:
        setDisplay(DIGIT_ONE, bKeyingNumber);
        bKeyingNumber = true;
        break;
      case KEY_TWO:
        setDisplay(DIGIT_TWO, bKeyingNumber);
        bKeyingNumber = true;
        break;
      case KEY_THREE:
        setDisplay(DIGIT_THREE, bKeyingNumber);
        bKeyingNumber = true;
        break;
      case KEY_FOUR:
        setDisplay(DIGIT_FOUR, bKeyingNumber);
        bKeyingNumber = true;
        break;
      case KEY_FIVE:
        setDisplay(DIGIT_FIVE, bKeyingNumber);
        bKeyingNumber = true;
        break;
      case KEY_SIX:
        setDisplay(DIGIT_SIX, bKeyingNumber);
        bKeyingNumber = true;
        break;
      case KEY_SEVEN:
        setDisplay(DIGIT_SEVEN, bKeyingNumber);
        bKeyingNumber = true;
        break;
      case KEY_EIGHT:
        setDisplay(DIGIT_EIGHT, bKeyingNumber);
        bKeyingNumber = true;
        break;
      case KEY_NINE:
        setDisplay(DIGIT_NINE, bKeyingNumber);
        bKeyingNumber = true;
        break;
        
        // operation key pressed
      case KEY_ADD:
        if (bKeyingNumber) {
          number = getNumber();
        }
        fireOperationEvent(Operation.ADD, number);
        bKeyingNumber = false;
        
        break;
      case KEY_SUBTRACT:
        if (bKeyingNumber) {
          number = getNumber();
        }
        fireOperationEvent(Operation.SUBSTRACT, number);
        bKeyingNumber = false;
        break;
      case KEY_MULTIPLY:
        if (bKeyingNumber) {
          number = getNumber();
        }
        fireOperationEvent(Operation.MULTIPLY, number);
        bKeyingNumber = false;
        break;
      case KEY_DIVIDE:
        if (bKeyingNumber) {
          number = getNumber();
        }
        fireOperationEvent(Operation.DIVIDE, number);
        bKeyingNumber = false;
        break;
      case KEY_SIGN:
        toggleSign();
        break;
      case KEY_DECIMAL:
        setDecimalPoint();
        break;
      case KEY_ENTER:
        number = getNumber();
        fireOperationEvent(Operation.PUSH, number);
        bKeyingNumber = false;
        break;
      case KEY_CLEAR:
        setDisplay("", false);
        fireOperationEvent(Operation.CLEAR, null);
        break;
        
        // memory key pressed
      case KEY_M1:
      case KEY_M2:
      case KEY_M3:
        break;
        
        // function key pressed
      case KEY_F1:
        fireOperationEvent(Operation.F1, null);
        break;
      case KEY_F2:
        fireOperationEvent(Operation.F2, null);
        break;
      case KEY_F3:
        fireOperationEvent(Operation.F3, null);
        break;
        
      case KEY_F4:
        fireOperationEvent(Operation.F4, null);
        break;
      default:
        
    }
  }
  
  private void setDisplay(String str, boolean bAppend) {
    if (bAppend) {
      str = txtDisplay.getText() + str;
    }
    txtDisplay.setText(str);
  }
  
  private void toggleSign() {
    StringBuffer strDisplay = new StringBuffer(txtDisplay.getText());
    if (strDisplay.length() == 0) {
      return;
    }
    if (strDisplay.charAt(0) == '-') {
      strDisplay.deleteCharAt(0);
    } else {
      strDisplay.insert(0, '-');
    }
    setDisplay(strDisplay.toString(), false);
  }
  
  private void setDecimalPoint() {
    StringBuffer strDisplay = new StringBuffer(txtDisplay.getText());
    int indexOfDecimal = strDisplay.indexOf(".");
    if (indexOfDecimal != -1) {
      strDisplay.deleteCharAt(indexOfDecimal);
    }
    strDisplay.append('.');
    setDisplay(strDisplay.toString(), false);
  }
  
  
  private void fireOperationEvent(Operation op, Number number) {
    OperationEvent evt = new OperationEvent(this, op, number);
    for (OperationListener listener: listeners) {
      listener.performOperation(evt);
    }
    
  }
  
  public void addOperationListener(OperationListener listener) {
    listeners.add(listener);
  }
  
  public void removeOperationListener(OperationListener listener) {
    listeners.remove(listener);
  }
  
  public void updateTotal(CalcModelEvent evt) {
    Number number = evt.getNumber();
    if (number != null && !Double.isNaN(number.doubleValue())) {
      String txt = number.toString();
      txtDisplay.setText(txt);
    } else {
      txtDisplay.setText("ERROR");
    }
  }
  
  private static final String DIGIT_ZERO = "0";
  private static final String DIGIT_ONE = "1";
  private static final String DIGIT_TWO = "2";
  private static final String DIGIT_THREE = "3";
  private static final String DIGIT_FOUR = "4";
  private static final String DIGIT_FIVE = "5";
  private static final String DIGIT_SIX = "6";
  private static final String DIGIT_SEVEN = "7";
  private static final String DIGIT_EIGHT = "8";
  private static final String DIGIT_NINE = "9";
  
  
  private List<OperationListener> listeners;
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private com.sun.demo.calculator.KeyPad keyPad;
  private javax.swing.JTextField txtDisplay;
  // End of variables declaration//GEN-END:variables
  
}
